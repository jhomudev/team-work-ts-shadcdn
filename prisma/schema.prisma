// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  EMPLOYER
  PEOPLE
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model User {
  id              String @id @default(cuid())
  name            String
  username        String @unique @default(uuid())
  email           String @unique
  emailVerified   DateTime?
  password        String?
  image           String?
  role            UserRole @default(PEOPLE)
  description     String?
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @default(now()) @updatedAt @map("updated_at")
  accounts        Account[]
  applications    Application[]
  bookmarks       Bookmark[]
  jobs            Job[]

  @@map("users")
}

model VerificationToken {
  id         String   @id @default(cuid())
  email      String
  token      String   @unique
  expires    DateTime

  @@unique([email, token])
  @@map("verification_tokens")
}

enum JobMode {
  ON_SITE
  REMOTE
  HYBRID
}

enum JobTime {
  FULL_TIME
  PART_TIME
}

enum Seniority {
  SENIOR
  JUNIOR
  MID_LEVEL
  TRAINER
}

enum JobStatus {
  DRAFT
  OPEN
  CLOSED
}

model Job {
  id              String @id @default(cuid())
  title           String
  description     String
  mode            JobMode?  
  time            JobTime?
  openings        Int
  seniority       Seniority?
  status          JobStatus @default(DRAFT)
  tags            String[]
  employerId      String @map("employer_id")
  employer        User @relation(fields: [employerId], references: [id])
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @default(now()) @updatedAt @map("updated_at")
  applications    Application[]
  bookmarks       Bookmark[]

  @@map("jobs")
}

model Application {
  applicantId   String @map("applicant_id")
  jobId         String @map("job_id")
  applicant     User  @relation(fields: [applicantId], references: [id], onDelete: Cascade)
  job           Job  @relation(fields: [jobId], references: [id], onDelete: Cascade)
  createdAt     DateTime @default(now()) @map("created_at")

  @@id([applicantId, jobId])
  @@map("applications")
}

model Bookmark {
  peopleId   String  @map("people_id")
  jobId      String  @map("job_id")
  people     User  @relation(fields: [peopleId], references: [id], onDelete: Cascade)
  job        Job  @relation(fields: [jobId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now()) @map("created_at")

  @@id([peopleId, jobId])
  @@map("bookmarks")
}


