// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserType {
  EMPLOYER
  PEOPLE
}

model User {
  id        Int @id @default(autoincrement())
  username  String @unique
  email     String @unique
  password  String
  image     String?
  type      UserType
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")
  employer  Employer?
  people    People?

  @@map("users")
}

model Employer {
  id            Int @id @default(autoincrement())
  name          String
  description   String?
  user          User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        Int @unique @map("user_id")
  jobs          Job[]

  @@map("employers")
}

model People {
  id            Int @id @default(autoincrement())
  names         String
  lastnames     String
  description   String?
  user          User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        Int @unique @map("user_id")
  applications  Application[]
  bookmarks     Bookmark[]

  @@map("people")
}

enum JobMode {
  ON_SITE
  REMOTE
  HYBRID
}

enum JobTime {
  FULL_TIME
  PART_TIME
}

enum Seniority {
  SENIOR
  JUNIOR
  MID_LEVEL
  TRAINER
}

enum JobStatus {
  DRAFT
  OPEN
  CLOSED
}

model Job {
  id              Int @id @default(autoincrement())
  title           String
  description     String
  mode            JobMode?  
  time            JobTime?
  openings        Int
  seniority       Seniority?
  status          JobStatus @default(DRAFT)
  tags            String[]
  employerId      Int @map("employer_id")
  employer        Employer @relation(fields: [employerId], references: [id])
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @default(now()) @updatedAt @map("updated_at")
  applications    Application[]
  bookmarks       Bookmark[]

  @@map("jobs")
}

model Application {
  applicantId   Int @map("applicant_id")
  jobId         Int @map("job_id")
  applicant     People  @relation(fields: [applicantId], references: [id], onDelete: Cascade)
  job           Job  @relation(fields: [jobId], references: [id], onDelete: Cascade)
  createdAt     DateTime @default(now()) @map("created_at")

  @@id([applicantId, jobId])
  @@map("applications")
}

model Bookmark {
  peopleId   Int  @map("people_id")
  jobId      Int  @map("job_id")
  people     People  @relation(fields: [peopleId], references: [id], onDelete: Cascade)
  job        Job  @relation(fields: [jobId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now()) @map("created_at")

  @@id([peopleId, jobId])
  @@map("bookmarks")
}


